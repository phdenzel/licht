#+AUTHOR: phdenzel
#+TITLE: licht
#+OPTIONS: toc:nil

~licht~ is a command-line program (including a GTK applet) which
fetches info from a local Philips Hue bridge in your network and
enables you to apply basic operations, such turning lights on/off,
dimming, color-temperature changing, etc.

I was looking for a lightweight program for Philips Hue, but
unfortunately most don't run (stable) on Arch linux, so I decided to
write it myself.


*** Prerequisites

    This program mainly uses following python3 modules
    - requests
    - pyyaml
    - pycairo
    - PyGObject

    The PyGObject dependencies additionally require some packages to
    be installed on your distribution. For a detailed overview see
    [[https://pygobject.readthedocs.io/en/latest/getting_started.html][https://pygobject.readthedocs.io/en/latest/getting_started.html]].

    For Arch linux use:

    #+begin_src shell
      sudo pacman -S python cairo pkgconf gobject-introspection gtk3
    #+end_src


*** Install

#+BEGIN_SRC shell
pip install licht
#+END_SRC

For installing from source, clone the repository, and run
#+BEGIN_SRC shell
cd licht
python setup.py install --user
#+END_SRC

or create a virtual environment with
#+BEGIN_SRC shell
pipenv install
pipenv install -e .
#+END_SRC

To activate the virtual environment run
#+BEGIN_SRC shell
pipenv shell
#+END_SRC

or start every command with ~pipenv run~.


*** Usage

#+BEGIN_SRC shell
  usage: licht [-h] [-c <path>] [-l <loc>] [-f <format>] [-o <path>] [-s <section>] [-p <par-list> [<par-list> ...]] [-v]

  optional arguments:
    -h, --help            show this help message and exit
    -c <path>, --config <path>
                          Path to the config file
    -l <loc>, --location <loc>
                          Location for which to pull information.
    -f <format>, --format <format>
                          Format template for xmobarrc
    -o <path>, --output <path>
                          Path to the output file
    -s <section>, --section <section>
                          Section in the yaml file to be parsed
    -p <par-list> [<par-list> ...], --pars <par-list> [<par-list> ...]
                          Select parameters to be fetched from wttr.in
                          excluded parameters are not available in xmobar template format
    -v, --verbose         Run program in verbose mode
#+END_SRC


*** Configuration

~xmobar_wttr~ works with both command-line arguments as well as YAML
configuration files (the first takes precedence over the latter).  To
set your desired defaults edit the configuration file
~xmobar_wttr.yml~ and place it in either 
- ~~/.config/xmobar_wttr/xmobar_wttr.yml~
- ~~/.config/xmobar/xmobar_wttr.yml~
- ~~/.xmobar_wttr/xmobar_wttr.yml~
- ~~/.xmobar_wttr.yml~


*** Notation

- Fields are separated by ~%~.
- Each field should have a parameter entry prefixed by an exclamation
  mark ~!~, e.g. ~!h~.
- Units can be placed using ~.u~
- Fonts can be selected using ~<N:...>~ where ~N~ is the xmobar font
  index, e.g. ~<2:weather condition>~ formats to ~<fn=2>weather
  condition</fn>~
- Analogously colors can be used using ~{#dedede:...}~.

|----------+------------------------------------|
| Notation | *Description                       |
|----------+------------------------------------|
| %[!par]  | parameter value                    |
| %g[!par] | render parameter only as icon      |
| %G[!par] | prefix icon to parameter value     |
| .u       | append units of previous parameter |
|----------+------------------------------------|

|---------------+----------------------|
| Format map    | Result               |
|---------------+----------------------|
| <2:...>       | <fn=2>...</fn>       |
| {#dedede:...} | <fc=#dedede>...</fc> |
| \...          | \x...                |
|---------------+----------------------|


**** Example:
~'%g!x %!t(%!f)<1: >.u {#46d9ff:%G}<1: >!h'~
could format to something like
~<fn=6></fn> 3(1)<fn=1> </fn>°C <fc=#46d9ff><fn=6></fn></fc><fn=1> </fn>81~
and renders in xmobar as

#+ATTR_HTML: :width 400 :style margin-left: auto; margin-right: auto;
[[./imgs/screenshot_example.png]]

